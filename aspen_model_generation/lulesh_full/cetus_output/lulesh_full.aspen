model lulesh_full {
param aspen_param_default = 1
param aspen_param_sizeof_double = 8
param aspen_param_sizeof_int = 4
data m_x as Array(m_numNode, aspen_param_sizeof_double)
data m_y as Array(m_numNode, aspen_param_sizeof_double)
data m_z as Array(m_numNode, aspen_param_sizeof_double)
data m_xd as Array(m_numNode, aspen_param_sizeof_double)
data m_yd as Array(m_numNode, aspen_param_sizeof_double)
data m_zd as Array(m_numNode, aspen_param_sizeof_double)
data m_xdd as Array(m_numNode, aspen_param_sizeof_double)
data m_ydd as Array(m_numNode, aspen_param_sizeof_double)
data m_zdd as Array(m_numNode, aspen_param_sizeof_double)
data m_nodalMass as Array(m_numNode, aspen_param_sizeof_double)
data m_symmX as Array(size_renamed, aspen_param_sizeof_int)
data m_symmY as Array(size_renamed, aspen_param_sizeof_int)
data m_symmZ as Array(size_renamed, aspen_param_sizeof_int)
data m_nodeElemCount as Array(m_numNode, aspen_param_sizeof_int)
data m_nodeElemStart as Array(m_numNode, aspen_param_sizeof_int)
data m_matElemlist as Array(m_numElem, aspen_param_sizeof_int)
data m_nodelist as Array((8*m_numElem), aspen_param_sizeof_int)
data m_lxim as Array(m_numElem, aspen_param_sizeof_int)
data m_lxip as Array(m_numElem, aspen_param_sizeof_int)
data m_letam as Array(m_numElem, aspen_param_sizeof_int)
data m_letap as Array(m_numElem, aspen_param_sizeof_int)
data m_lzetam as Array(m_numElem, aspen_param_sizeof_int)
data m_lzetap as Array(m_numElem, aspen_param_sizeof_int)
data m_elemBC as Array(m_numElem, aspen_param_sizeof_int)
data m_e as Array(m_numElem, aspen_param_sizeof_double)
data m_p as Array(m_numElem, aspen_param_sizeof_double)
data m_v as Array(m_numElem, aspen_param_sizeof_double)
data m_volo as Array(m_numElem, aspen_param_sizeof_double)
data m_elemMass as Array(m_numElem, aspen_param_sizeof_double)
param edgeElems = 300
param edgeNodes = (edgeElems+1)
param m_numElem = ((edgeElems*edgeElems)*edgeElems)
param m_numElem8 = (m_numElem*8)
param m_numNode = ((edgeNodes*edgeNodes)*edgeNodes)
param m_nCorner = m_numElem8
param size_renamed = ((edgeElems+1)*(edgeElems+1))
data m_nodeElemCornerList as Array(m_nCorner, aspen_param_int)
data elemToNode as Array(8, aspen_param_int)
param numElem = m_numElem
param aspen_param_whilecnt = 1
kernel CalcKinematicsForElems {
execute [numElem] "block_CalcKinematicsForElems9" {
flops [1] as integer
}
execute [numElem] "block_CalcKinematicsForElems33" {
flops [1] as integer
loads [((1*aspen_param_sizeof_int)*8)] from elemToNode as pattern(stencil4)
loads [((1*aspen_param_sizeof_double)*8)] from m_x as pattern(stencil4)
loads [((1*aspen_param_sizeof_double)*8)] from m_y as pattern(stencil4)
loads [((1*aspen_param_sizeof_double)*8)] from m_z as pattern(stencil4)
}
}
kernel CalcLagrangeElements {
execute  "block_CalcLagrangeElements463" {
flops [1] as integer
}
call CalcKinematicsForElems()
}
kernel LagrangeElements {
call CalcLagrangeElements()
}
kernel LagrangeLeapFrog {
call LagrangeElements()
}
kernel main {
execute  "block_main135__intracommIN" {
intracomm [(aspen_param_sizeof_double*m_numElem)] to m_e as copyin
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_yd as copyin
intracomm [(aspen_param_sizeof_int*m_nCorner)] to m_nodeElemCornerList as copyin
intracomm [(aspen_param_sizeof_int*m_numElem)] to m_elemBC as copyin
intracomm [(aspen_param_sizeof_int*(edgeNodes*edgeNodes))] to m_symmY as copyin
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_xd as copyin
intracomm [(aspen_param_sizeof_int*m_numElem)] to m_lzetap as copyin
intracomm [(aspen_param_sizeof_int*m_numElem)] to m_letam as copyin
intracomm [(aspen_param_sizeof_int*m_numElem)] to m_letap as copyin
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_x as copyin
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_xdd as copyin
intracomm [(aspen_param_sizeof_int*m_numElem)] to m_lzetam as copyin
intracomm [(aspen_param_sizeof_double*m_numElem)] to m_volo as copyin
intracomm [(aspen_param_sizeof_int*m_numElem)] to m_matElemlist as copyin
intracomm [(aspen_param_sizeof_int*(edgeNodes*edgeNodes))] to m_symmX as copyin
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_z as copyin
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_ydd as copyin
intracomm [(aspen_param_sizeof_double*m_numElem)] to m_v as copyin
intracomm [(aspen_param_sizeof_double*m_numElem)] to m_elemMass as copyin
intracomm [(aspen_param_sizeof_double*m_numElem)] to m_p as copyin
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_nodalMass as copyin
intracomm [(aspen_param_sizeof_int*m_numElem8)] to m_nodelist as copyin
intracomm [(aspen_param_sizeof_int*(edgeNodes*edgeNodes))] to m_symmZ as copyin
intracomm [(aspen_param_sizeof_int*m_numNode)] to m_nodeElemCount as copyin
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_zd as copyin
intracomm [(aspen_param_sizeof_int*m_numNode)] to m_nodeElemStart as copyin
intracomm [(aspen_param_sizeof_int*m_numElem)] to m_lxip as copyin
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_y as copyin
intracomm [(aspen_param_sizeof_int*m_numElem)] to m_lxim as copyin
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_zdd as copyin
flops [1] as dp
}
iterate [aspen_param_whilecnt] {
call LagrangeLeapFrog()
execute  "block_main139" {
flops [1] as integer
}
}
execute  "block_main135__intracommOUT" {
intracomm [(aspen_param_sizeof_double*m_numElem)] to m_e as copyout
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_yd as copyout
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_xd as copyout
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_x as copyout
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_z as copyout
intracomm [(aspen_param_sizeof_double*m_numElem)] to m_p as copyout
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_zd as copyout
intracomm [(aspen_param_sizeof_double*m_numNode)] to m_y as copyout
}
}
}
