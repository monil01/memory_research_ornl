model matmul {
param aspen_param_default = 1
param aspen_param_sizeof_float = 4
param N = 512
param M = N
param P = N
data a [((4*M)*N)] 
data b [((4*M)*P)] 
data c [((4*N)*P)] 
kernel MatrixMultiplication_openacc {
execute  "block_MatrixMultiplication_openacc7__intracommIN" {
intracomm [(aspen_param_sizeof_float*(M*P))] to b as copyin
intracomm [(aspen_param_sizeof_float*(N*P))] to c as copyin
}
execute [M] "block_MatrixMultiplication_openacc8" {
flops [1] as integer
}
map [M] "mapblock_MatrixMultiplication_openacc8" {
execute [N] "block_MatrixMultiplication_openacc9" {
flops [1] as integer
}
execute [N] "block_MatrixMultiplication_openacc12" {
flops [1] as integer
loads [((1*aspen_param_sizeof_float)*P)] from c
loads [((1*aspen_param_sizeof_float)*P)] from b as stride(1)
flops [(4*P)] as integer
flops [(2*P)] as sp, simd
stores [(1*aspen_param_sizeof_float)] to a as stride(1)
flops [2] as integer
}
}
execute  "block_MatrixMultiplication_openacc7__intracommOUT" {
intracomm [(aspen_param_sizeof_float*(M*N))] to a as copyout
}
}
kernel main {
call MatrixMultiplication_openacc()
}
}
